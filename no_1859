no_1859. 백만장자 프로젝트

다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.

    1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
    2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
    3. 판매는 얼마든지 할 수 있다.

예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,

둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.

각 날의 매매가는 10,000이하이다.



[문제풀이]
<sol.1>
1. 매매가의 최대값일 때 파는 것이 가장 이득
2. 최대값의 이전 값의 이익을 모두 더함  ((최대값-당일 매매가)가 이익) 
3. 최대값 이후 부터 그 다음 최대값까지 발생한 이익을 더함
4. 최대값 이후 보다 큰 값이 없을 때 까지 2,3번 반복
BUT, 이는 O(N^2)의 시간이 걸림 -> Time Limit

따라서 새로운 방법(시간을 줄일 수 있는 알고리즘)이 필요
O(N)의 시간에 구하기 위해서는 한번의 배열 탐색으로 결론을 내야 함
가장 비싼 매매가 일 때 팔아야 이득... 한번 팔고 그 이후 더 큰 최대값 나오면 손해임. 팔지말고 갖고 있엇어야함.후회.
따라서 미래를 보자. (원재는 미래를 보는 능력을 가졌다)
미래에서부터 현재로 오면서 가장 비싼 매매가인 날 팔면 가장 이득.
미래에서부터 현재로 오면서 가장 비싼 매매가 인줄 알았는데 현재쪽에 더 비싼 매매가가 있으면 그전에 팔아야함.

이전 풀이는 앞에서 부터 검사하여 나온 최대값이 그 이후에 나온 최대값보다 큰 경우를 고려하다보니 O(N^2)이 되지만.
이와 반대로, 뒤에서 부터 검사하여 최대값을 갱신하며 이익을 계산해 나가면 O(N)으로 구해진다.
<sol.2>
1. 매매가를 받은 배열의 맨 마지막 값을 max라고 가정
2. 앞으로 오면서 max와 비교
3. max값보다 큰 값을 만날 경우 max값 교체, 아닐 경우 이익을 더해나감
4. 첫 매매가 입력 까지 2,3번 반복
이는 O(N)의 시간이 걸림


[참고]
N은 1,000,000이 최대, 매매가는 10,000이 최대 이므로 
이익의 최대값은 대략 10,000,000,000이다.
이는 int형으로 표현 불가 (-2^31 ~ (2^31-1) = ((2^10)^3)*2 = ((1024)^3)*2   > 대략 >    (10^3)^3*2  )
따라서 java에서는 long형으로 표현 해야함 



